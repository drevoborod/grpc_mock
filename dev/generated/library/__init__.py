# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: grpc_client.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class BookAddRequest(betterproto.Message):
    book_uuid: str = betterproto.string_field(1)
    user_id: int = betterproto.int64_field(2)
    timestamp: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BookAddReply(betterproto.Message):
    transaction_uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BookRemoveRequest(betterproto.Message):
    book_uuid: str = betterproto.string_field(1)
    user_id: int = betterproto.int64_field(2)
    timestamp: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BookRemoveReply(betterproto.Message):
    transaction_uuid: str = betterproto.string_field(1)


class BooksStub(betterproto.ServiceStub):
    async def book_add_endpoint(
        self,
        book_add_request: "BookAddRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BookAddReply":
        return await self._unary_unary(
            "/library.Books/BookAddEndpoint",
            book_add_request,
            BookAddReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def book_remove_endpoint(
        self,
        book_remove_request: "BookRemoveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BookRemoveReply":
        return await self._unary_unary(
            "/library.Books/BookRemoveEndpoint",
            book_remove_request,
            BookRemoveReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class BooksBase(ServiceBase):

    async def book_add_endpoint(
        self, book_add_request: "BookAddRequest"
    ) -> "BookAddReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def book_remove_endpoint(
        self, book_remove_request: "BookRemoveRequest"
    ) -> "BookRemoveReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_book_add_endpoint(
        self, stream: "grpclib.server.Stream[BookAddRequest, BookAddReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.book_add_endpoint(request)
        await stream.send_message(response)

    async def __rpc_book_remove_endpoint(
        self, stream: "grpclib.server.Stream[BookRemoveRequest, BookRemoveReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.book_remove_endpoint(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/library.Books/BookAddEndpoint": grpclib.const.Handler(
                self.__rpc_book_add_endpoint,
                grpclib.const.Cardinality.UNARY_UNARY,
                BookAddRequest,
                BookAddReply,
            ),
            "/library.Books/BookRemoveEndpoint": grpclib.const.Handler(
                self.__rpc_book_remove_endpoint,
                grpclib.const.Cardinality.UNARY_UNARY,
                BookRemoveRequest,
                BookRemoveReply,
            ),
        }
